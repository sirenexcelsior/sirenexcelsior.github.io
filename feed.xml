<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sirenexcelsior.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sirenexcelsior.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-31T20:16:20+00:00</updated><id>https://sirenexcelsior.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">All Task of Assembly Language 2024</title><link href="https://sirenexcelsior.github.io/blog/2024/code/" rel="alternate" type="text/html" title="All Task of Assembly Language 2024"/><published>2024-03-30T00:00:00+00:00</published><updated>2024-03-30T00:00:00+00:00</updated><id>https://sirenexcelsior.github.io/blog/2024/code</id><content type="html" xml:base="https://sirenexcelsior.github.io/blog/2024/code/"><![CDATA[<p>This is a site for the record of all test answers for the course <a href="https://scs.math.msu.ru/node/4281">Assembly Language</a>, Spring 2024, taught by Леонов Александр Георгиевич, on the online course platform <a href="https://mirera.ru/user/groups/65cb80e98cd5ad641f4efb8b">mirera.ru</a>.</p> <h2 id="lecture-01">Lecture 01</h2> <h3 id="0-example">0 (Example)</h3> <pre><code class="language-assembly">MOV AX,0	; Move 0 to register AX, i.e., assign the value
</code></pre> <h3 id="2000">2000</h3> <p>Write a program that puts 2000 in the AX register.</p> <pre><code class="language-assembly">MOV AX, 2000
</code></pre> <h3 id="data">Data</h3> <p>Write a program that puts data from BX in the AX register.</p> <pre><code class="language-assembly">MOV AX, BX
</code></pre> <h3 id="sum-example">Sum (Example)</h3> <p>Run the program that puts the sum of data from BX and CX into the AX register.</p> <pre><code class="language-assembly">MOV AX,BX
ADD AX,CX
</code></pre> <h3 id="subtract">Subtract</h3> <p>Write a program that places the result of subtracting data CX from BX into register AX.</p> <pre><code class="language-assembly">SUB BX, CX
MOV AX, BX
</code></pre> <h3 id="calculate">Calculate</h3> <p>Write a program that places the result of operation into register AX.</p> <pre><code class="language-assembly">MOV AX, 0
MOV BX, FF00
MOV CX, F
MOV DX, F1

AND CX, DX
OR  CX, 80

MOV AX, BX
OR  AX, C0
ADD AX, CX
NEG AX
</code></pre> <h3 id="swap">Swap</h3> <p>Write a program that swaps two numbers in registers BX and CX.</p> <pre><code class="language-assembly">MOV AX, BX
MOV BX, CX
MOV CX, AX
</code></pre> <h3 id="swap-return">Swap Return</h3> <p>Write a program that swaps two numbers in registers BX and CX (Not use Push/Pop or other registers)!</p> <pre><code class="language-assembly">ADD BX, CX
SUB CX, BX
NEG CX
SUB BX, CX
</code></pre> <h3 id="not">NOT</h3> <p>Bitwise Unary NOT (~) performs <em>complementation</em> or <em>negation</em> operation; inverts all the bits of the number, i.e. <em>0→1</em> and <em>1→0</em>.</p> <ul> <li> <p>Truth table:</p> <table> <thead> <tr> <th style="text-align: center"><strong>A</strong></th> <th style="text-align: center"><strong>~ A</strong></th> </tr> </thead> <tbody> <tr> <td style="text-align: center">0</td> <td style="text-align: center">1</td> </tr> <tr> <td style="text-align: center">1</td> <td style="text-align: center">0</td> </tr> </tbody> </table> </li> </ul> <p>Write a program that places the result of operation NOT into register AX. (Not use Push/Pop or other registers)!</p> <pre><code class="language-assembly">NEG AX
DEC AX
</code></pre> <h3 id="remember">Remember!</h3> <p>Write a program that stores two numbers in registers BX and CX between operations.</p> <pre><code class="language-assembly">PUSH BX
PUSH CX

MOV DX,0
MOV CX,0
MOV BX,0
MOV AX,0

POP CX
POP BX
</code></pre> <h3 id="xor">XOR</h3> <p>Exclusive or or exclusive disjunction is a logical operation that is true if and only if its arguments differ (one is 1, the other is 0). Exclusive disjunction is often used for bitwise operations. Examples:</p> <ul> <li>1 XOR 1 = 0</li> <li>1 XOR 0 = 1</li> <li>0 XOR 1 = 1</li> <li>0 XOR 0 = 0</li> </ul> <p>Write a program that places the result of operation AX XOR BX into register AX. (Not use Push/Pop or all other registers, you can use only one extra register - CX)!</p> <pre><code class="language-assembly">MOV CX, AX
OR  AX, BX
AND BX, CX
NEG BX
DEC BX
AND AX, BX
</code></pre> <h3 id="left-shift-example">Left Shift (Example)</h3> <p>Run the program that multiply by 2 a number in the AX register.</p> <p><em>Do Not forget CLC before any RCL!</em></p> <pre><code class="language-assembly">CLC
RCL AX
END
</code></pre> <h3 id="right-shift">Right Shift</h3> <p>Write a program that divides by 2 the number in register CX and puts the result in register AX.</p> <p><em>Do Not forget CLC before any RCR!</em></p> <pre><code class="language-assembly">CLC
RCR CX
MOV AX, CX
</code></pre> <h3 id="multishift">MultiShift</h3> <p>Write a program that puts the value of AX multiplied by 4 into register BX and the value of AX divided by 4 into register CX.</p> <p>Use the shift operations RCL and RCR.</p> <p><em>Do Not forget CLC before any RCL and RCR!</em></p> <pre><code class="language-assembly">MOV BX, AX
MOV CX, AX

CLC
RCL BX
CLC
RCL BX

CLC
RCR CX
CLC
RCR CX
</code></pre> <h3 id="sum">Sum</h3> <p>Write a program that puts into register AX the sum of two 8-bit numbers stored in 16-bit register BX.</p> <p>Example: BX = \(032E_{16}\), result AX = \(03__{16} + 2E__{16}\) = \(31_{16}\).</p> <p>If BX=0, then AX=0.</p> <p>Use the shift operations RCL or RCR.</p> <p><em>Do Not forget CLC before any RCL and RCR!</em></p> <pre><code class="language-assembly">MOV AX, BX
AND AX, 00FF
MOV CX, BX

CLC
RCR CX
CLC
RCR CX
CLC
RCR CX
CLC
RCR CX
CLC
RCR CX
CLC
RCR CX
CLC
RCR CX
CLC
RCR CX

ADD AX, CX

END
</code></pre> <h2 id="lecture-02">Lecture 02</h2> <h3 id="zero-comparison-example">Zero Comparison (Example)</h3> <p>Run a program that compares BX and CX and sets AX=1 when BX = CX</p> <pre><code class="language-assembly">CMP BX,CX
JNZ ?1
MOV AX,1
?1:
</code></pre> <h3 id="comparing-two-numbers">Comparing two numbers</h3> <p>Write a program that puts 1 in register AX if BX \(\ge\) CX and 0 otherwise.</p> <pre><code class="language-assembly">CMP BX, CX
JC  ?01
MOV AX, 1
JMP ?02
?01:
MOV AX, 0
?02:
</code></pre> <h3 id="absolute-value">Absolute value</h3> <p>Write a program to put the absolute value of the difference between the numbers in BX and CX into register AX.</p> <pre><code class="language-assembly">CMP BX, CX
JNC ?01
SUB CX, BX
MOV AX, CX
JMP ?02
?01:
SUB BX, CX
MOV AX, BX
?02:
</code></pre> <h3 id="minimum">Minimum</h3> <p>Write a program that puts the minimum number of numbers from BX and CX into AX.</p> <pre><code class="language-assembly">CMP BX, CX
JC  ?01
MOV AX, CX
JMP ?02
?01:
MOV AX, BX
?02:
</code></pre> <h3 id="divisible-by-3">Divisible by 3</h3> <p>Write a program that puts 1 in register AX if BX is evenly divisible by 3, and 0 otherwise.</p> <pre><code class="language-assembly">MOV AX, BX
MOV CX, 3
JZ  ?03
?01:
SUB AX, 0
JZ  ?03
CMP AX, CX
JC  ?02
JZ  ?03
SUB AX, CX
JMP ?01

?02:
MOV AX, 0
JMP ?04

?03:
MOV AX, 1

?04:
</code></pre> <h3 id="divisible-by-2">Divisible by 2</h3> <p>Write a program that puts 1 in register AX if BX is evenly divisible by 2, and 0 otherwise.</p> <p>(Do not use all other registers, except AX and BX or any Jump command)!</p> <pre><code class="language-assembly">MOV AX, 1
AND BX, 1
SUB AX, BX
</code></pre> <h3 id="bit-number">Bit number</h3> <p>Bits in a 16-bit register are numbered from 1 (least significant bit) to 16. Write a program that finds the least significant non-zero bit number of register BX and puts the answer into register AX.</p> <p>If BX=0, then AX=0.</p> <p>Use the RCR shift operation.</p> <p>Example: BX=\(0006_{16}\) (0000 0000 0000 01102), AX=2.</p> <pre><code class="language-assembly">MOV CX, 0
MOV AX, BX

OR  AX, AX
JZ  ?01
MOV CX, 1

?02:
RCR BX
JC  ?03
INC CX
JMP ?02

?03:
MOV AX, CX
JMP ?04

?01:
MOV AX, 0

?04:
</code></pre> <h3 id="number-of-different-numbers">Number of different numbers</h3> <p>Write a program that puts in register AX the number of different numbers in BX, CX, DX.</p> <p>Example:</p> <ul> <li>DX = 0</li> <li>BX = 1</li> <li>CX = 2</li> <li>Answer AX = 3</li> </ul> <pre><code class="language-assembly">MOV AX, 3
CMP BX, CX
JNZ ?01
DEC AX

?01:
CMP BX, DX
JNZ ?02
DEC AX

?02:
CMP CX, DX
JNZ ?03
DEC AX

?03:
CMP AX, 1
JNC ?04
MOV AX, 1

?04:
</code></pre> <h3 id="number-of-maximum">Number of maximum</h3> <p>Write a program that counts the maximums in the sequence BX, CX, DX and places the result in the AX register. For example, in the sequence of numbers 1,2,3 - the maximum is unique and equals 3 (BX=1, CX=2, DX=3 ⇒ AX=1) In the sequence of numbers 3,1,3 - the maximum is 3 and there are 2 such numbers in the sequence (BX=3, CX=1, DX=3 ⇒ AX=2).</p> <pre><code class="language-assembly">MOV AX, 1
?00:
CMP BX, CX
JC  ?01
JZ  ?02
?03:
CMP BX, DX
JC  ?04
JZ  ?05
JMP ?06
?01:
MOV BX, CX
MOV AX, 1
JMP ?03
?02:
INC AX
JMP ?03
?04:
MOV BX, DX
MOV AX, 1
JMP ?06
?05:
INC AX
JMP ?06
?06:
</code></pre> <h3 id="sides-of-a-triangle">Sides of a triangle</h3> <p>Can non-negative integers in BX, CX, DX be sides of a triangle?</p> <p>The result will be AX=1 if YES and AX=0 if NOT.</p> <pre><code class="language-assembly">ADD BX, CX
MOV AX, BX
SUB BX, CX
SUB AX, DX
JZ  ?00
JC  ?00
MOV AX, 1

ADD BX, DX
MOV AX, BX
SUB BX, DX
SUB AX, CX
JZ  ?00
JC  ?00
MOV AX, 1

ADD CX, DX
MOV AX, CX
SUB CX, DX
SUB AX, BX
JZ  ?00
JC  ?00
MOV AX, 1
JMP ?03

?00:
MOV AX, 0

?03:
</code></pre> <h3 id="right-triangle">Right triangle</h3> <p>Can non-negative integers in BX, CX, DX be sides of a right triangle?</p> <p>The result will be AX=1 if yes, and AX=0 if not.</p> <p><em>Note</em>. A triangle with sides {0,0,0} is not a right triangle.</p> <pre><code class="language-assembly">PUSH DX
PUSH CX
MOV AX, BX
MOV CX, BX
DEC AX

?01:
ADD BX, CX
DEC AX
JZ  ?02
JMP ?01

?02:
POP CX
POP DX

PUSH BX
PUSH DX
MOV AX, CX
MOV BX, CX
DEC AX

?03:
ADD CX, BX
DEC AX
JZ ?04
JMP ?03

?04:
POP DX
POP BX

PUSH BX
PUSH CX
MOV AX, DX
MOV BX, DX
DEC AX

?05:
ADD DX, BX
DEC AX
JZ ?06
JMP ?05

?06:
POP CX
POP BX

MOV AX, 0

CMP BX, 0
CMP CX, 0
CMP DX, 0
JZ  ?07

ADD BX, CX
CMP BX, DX
JZ  ?09
SUB BX, CX

ADD BX, DX
CMP BX, CX
JZ  ?09
SUB BX, DX

ADD CX, DX
CMP CX, BX
JZ  ?09
SUB CX, DX
JMP ?07

?09:
MOV AX, 1
?07:
</code></pre> <h3 id="long-shift-to-the-left">Long shift to the left</h3> <p>Run a program that doubles a 32-bit number from the BX AX registers (lower part of AX).</p> <p>RCL shift operations are used.</p> <pre><code class="language-assembly">CLC
RCL AX
RCL BX
</code></pre> <h3 id="long-shift-to-the-right">Long shift to the right</h3> <p>Write a program that divides a 32-bit number from the BX AX registers (lower part of AX) by 4.</p> <p>RCR shift operations are used.</p> <pre><code class="language-assembly">RCR BX
RCR AX

RCR BX
RCR AX
</code></pre> <h3 id="adding-two-long">Adding two long</h3> <p>Write a program that adds a 32-bit long number stored in the CX, DX registers with a long number stored in the AX, BX registers.</p> <pre><code class="language-assembly">ADD BX, DX
JC  ?00
JMP ?01
?00:
INC AX
?01:
ADD AX, CX
</code></pre> <h3 id="bus-for-programmers">Bus for programmers</h3> <p>Bus tickets for programmers have a hexadecimal number. We call a ticket lucky if the sum of the two left hexadecimal digits is equal to the sum of the two right digits, for example ADE9. Example of an unsuccessful ticket: 7+8≠9+3. How many lucky ticket numbers are found from number BX to number CX, including borders?</p> <pre><code class="language-assembly">SUB CX ,  BX
ADD CX ,  2

?00: 
DEC CX
JZ  ?03

MOV [1] ,  BX

AND BX ,  F

MOV DX ,  BX

MOV BX ,  [1]
AND BX ,  F0
CLC
RCR BX
RCR BX
RCR BX
RCR BX

ADD DX ,  BX

MOV BX ,  [1]
AND BX ,  F00
CLC
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX

SUB DX ,  BX

MOV BX ,  [1]
AND BX ,  F000
CLC
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX
RCR BX

SUB DX ,  BX

CMP DX ,  0
JZ ?01
MOV BX ,  [1]
INC BX
JMP ?00

?01: 
INC AX
MOV BX ,  [1]
INC BX
JMP ?00

?03: 
</code></pre> <h2 id="lecture-03">Lecture 03</h2> <h3 id="contents-of-an-address">Contents of an Address</h3> <p>Write a program that puts the contents at address BX into register AX.</p> <pre><code class="language-assembly">MOV AX, [BX]
</code></pre> <h3 id="contents-of-2">Contents of 2</h3> <p>Write a program that gets the number plus 200 from the BX register. Place the result in the AX register.</p> <p>Example: BX=\(100_{16}\) ⇒ \(AX=300_{16}\)</p>]]></content><author><name>SiREN</name></author><category term="Tasks"/><category term="Math"/><category term="Code"/><summary type="html"><![CDATA[all Task of Assembly Language]]></summary></entry></feed>